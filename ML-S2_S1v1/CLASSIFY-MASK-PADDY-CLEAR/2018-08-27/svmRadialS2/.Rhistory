unC_bands_df_SS <- unC_bands_df[ss[,1],]
unC_bands_df_SS
unC_bands_df_SS <- unC_bands_df[ss[,1],]
colnames(unC_bands_df_SS) <- c("S2_B02","S2_B03","S2_B04","S2_B05","S2_B06","S2_B07","S2_B08","S2_B11","S2_B12","S2_B8A","CLUSTER")
print ("predicting")
unC_bands_df_SS
unC_bands_df_SS <- na.omit(unC_bands_df_SS)
colnames(unC_bands_df_SS) <- c("S2_B02","S2_B03","S2_B04","S2_B05","S2_B06","S2_B07","S2_B08","S2_B11","S2_B12","S2_B8A","CLUSTER")
print ("predicting")
result1 <- predict(allModelsResults,unC_bands_df_SS)
length(result1)
combin1 <- data.frame(unC_bands_df_SS,result1)
combin1
unC_bands_df_SS
combin1
View(combin1)
temp1 <- combin1[combin1$CLUSTER==i,]
i<-1
i
temp1 <- combin1[combin1$CLUSTER==i,]
temp1
temp1 <- combin1$result1[combin1$CLUSTER==i,]
temp1 <- combin1$result1[combin1$CLUSTER==i]
temp1
result1 <- as.list(predict(allModelsResults,unC_bands_df_SS))
length(result1)
combin1 <- data.frame(unC_bands_df_SS,result1)
temp1 <- combin1$result1[combin1$CLUSTER==i]
temp1
combin1$CLUSTER
combin1$result1
result1 <- predict(allModelsResults,unC_bands_df_SS)
length(result1)
combin1 <- data.frame(unC_bands_df_SS,result1)
temp1 <- combin1$result1[combin1$CLUSTER==i]
temp1 <- combin1$result1[combin1$CLUSTER==i]
print(names(temp1)[which.max(temp1)])
temp1 <- combin1$result1[combin1$CLUSTER==i,]
temp1
temp1 <- combin1$result1[combin1$CLUSTER==i,]
temp1 <- combin1[combin1$CLUSTER==i,]
temp1
print(names(temp1$result1)[which.max(temp1$result1)])
temp2 <- as.list(temp1)
temp2
temp2 <- as.array(temp1)
temp2
temp1 <- combin1[combin1$CLUSTER==i,]
temp1
temp2 <- as.array(temp1$result1)
temp2
levels(droplevels(temp1$result1))
temp2 <- as.array(temp1$result1)
temp2
c<- levels(droplevels(temp1$result1))
c
for (i in 1:50) {
temp1 <- combin1[combin1$CLUSTER==i,]
c<- levels(droplevels(temp1$result1))
temp2 <- as.array(temp1$result1)
print(paste(i,c))
}
i<- 2
i
temp1 <- combin1[combin1$CLUSTER==i,]
c<- levels(droplevels(temp1$result1))
temp2 <- as.array(temp1$result1)
temp2
ss <- sampleStratified(unC$map, size=10)
ss <- na.omit(ss)
unC_bands_df_SS <- unC_bands_df[ss[,1],]
unC_bands_df_SS <- na.omit(unC_bands_df_SS)
colnames(unC_bands_df_SS) <- c("S2_B02","S2_B03","S2_B04","S2_B05","S2_B06","S2_B07","S2_B08","S2_B11","S2_B12","S2_B8A","CLUSTER")
print ("predicting")
result1 <- predict(allModelsResults,unC_bands_df_SS)
length(result1)
ss
unC_bands_df_SS <- unC_bands_df[ss[,1],]
unC_bands_df_SS <- na.omit(unC_bands_df_SS)
colnames(unC_bands_df_SS) <- c("S2_B02","S2_B03","S2_B04","S2_B05","S2_B06","S2_B07","S2_B08","S2_B11","S2_B12","S2_B8A","CLUSTER")
print ("predicting")
result1 <- predict(allModelsResults,unC_bands_df_SS)
length(result1)
combin1 <- data.frame(unC_bands_df_SS,result1)
for (i in 1:50) {
temp1 <- combin1[combin1$CLUSTER==i,]
c<- levels(droplevels(temp1$result1))
temp2 <- as.array(temp1$result1)
print(paste(i,c))
}
combin1[combin1$CLUSTER==1,]
levels(droplevels(temp1$result1))
temp2 <- as.array(temp1$result1)
temp2
names(temp1$result1)[which.max(temp1$result1)]
which.max(temp1$result1)
temp1$result1)
temp1$result1
names(temp1$result1)[which.max(temp1$result1)]
temp1$result1
temp1$result1
which.max(temp1$result1)
temp1
i<-2
temp1 <- combin1[combin1$CLUSTER==i,]
names(temp1$result1)[which.max(temp1$result1)]
[which.max(temp1$result1)]
[which.max(temp1$result1)]
[which.max(temp1$result1)
print(paste(i,c))
}
size_df <-  dim(JAVA_classify_df)[1]
which.max(temp1$result1)
which.max
names(temp1$result1)[which.max(temp1$result1)]
names(temp1$result1)
which.max(temp1$result1)
temp1
temp1 <- combin1[combin1$CLUSTER==i,"result1"]
temp1
names(temp1)[which.max(temp1)]
names(temp1)[which.max(temp1)]
temp1 <- combin1[combin1$CLUSTER==i,"result1"]
temp1
temp2 <- as.list(temp1)
temp2
temp2 <- as.integer(temp1)
temp2
temp2 <- as.integer(temp1)
names(temp1)[which.max(temp1)]
names(temp2)[which.max(temp2)]
names(t)[which.max(t)]
t <- table(temp2)
names(t)[which.max(t)]
for (i in 1:50) {
temp1 <- combin1[combin1$CLUSTER==i,"result1"]
temp2 <- as.integer(temp1)
t <- table(temp2)
print(paste(i, names(t)[which.max(t)]))
}
cluster_predicted <- NA
for (i in 1:50) {
temp1 <- combin1[combin1$CLUSTER==i,"result1"]
temp2 <- as.integer(temp1)
t <- table(temp2)
max1<- names(t)[which.max(t)]
print(paste(i,max1))
cluster_predicted[i] <- max1
}
cluster_predicted
fun_raster_1 <- function(x) {
if (is.na(x[1])==FALSE) {
result <- cluster_predicted[x[1]]
} else {
result <- NA
}
return(result)
}
raster_S2VH <- calc(unC$map, fun_raster_1)
result
fun_raster_1 <- function(x) {
if (is.na(x[1])==FALSE) {
print(cluster_predicted[x[1]])
result <- cluster_predicted[x[1]]
} else {
result <- NA
}
return(result)
}
raster_S2VH <- calc(unC$map, fun_raster_1)
fun_raster_1 <- function(x) {
if (is.na(x[1])==FALSE) {
result <- as.integer(cluster_predicted[x[1]])
} else {
result <- NA
}
return(result)
}
raster_S2VH <- calc(unC$map, fun_raster_1)
cluster_predicted <- as.integer(cluster_predicted)
cluster_predicted
cluster_predicted <- as.integer(cluster_predicted)
fun_raster_1 <- function(x) {
if (is.na(x[1])==FALSE) {
result <- cluster_predicted[x[1]]
} else {
result <- NA
}
return(result)
}
raster_S2VH <- calc(unC$map, fun_raster_1)
filename_S2VH<- ("C:/MasseyOffice1/Research/R-Script2019/CLUSTER/L2A_T48MZT_20180731T024539_result.tif")
writeRaster(raster_S2VH, filename=filename_S2VH, format="GTiff", overwrite=TRUE)
source('C:/MasseyOffice1/Research/R-Script2019/cluster2.R', echo=TRUE)
source('C:/MasseyOffice1/Research/R-Script2019/cluster2.R', echo=TRUE)
source('C:/MasseyOffice1/Research/R-Script2019/cluster2.R', echo=TRUE)
unC <- unsuperClass(bands, nSamples = 100, nClasses = 50, nStarts = 5,clusterMap = TRUE,nIter = 100)
unC <- unsuperClass(bands, nSamples = 100, nClasses = 70, nStarts = 5,clusterMap = TRUE,nIter = 100)
source('C:/MasseyOffice1/Research/R-Script2019/cluster2.R', echo=TRUE)
source('C:/MasseyOffice1/Research/R-Script2019/cluster2.R', echo=TRUE)
debugSource('C:/MasseyOffice1/Research/R-Script2019/TCI_PDF_INDO2 dir.R', echo=TRUE)
S2_FOLDER1
if (dir.exists(S2_FOLDER1)==TRUE) {
shell(paste("CD", mainDir_S2, " \r\n G: \r\n ", "rename ", PROV, PROVDIR))
} else {
dir.create(S2_FOLDER2, showWarnings = FALSE)
}
S2_FOLDER2
S2_FOLDER1
shell(paste("CD", mainDir_S2, " \r\n G: \r\n ", "rename ", PROV, PROVDIR))
shell(paste("CD", mainDir_S2, " \r\n G: \r\n ", "rename ", PROV, PROVDIR))
shell(paste("G: \r\n CD", mainDir_S2, " \r\n  ", "rename ", PROV, PROVDIR))
help shell
help (shell)
shell(paste("G: \r\n CD", mainDir_S2, " \r\n  ", "rename ", PROV, PROVDIR))
PROV
PROVDIR
paste("G: \r\n CD", mainDir_S2, " \r\n  ", "rename ", PROV, PROVDIR)
mainDir_S2
S2_FOLDER1
shell("rename", S2_FOLDER1, S2_FOLDER2),translate=TRUE)
shell(paste("rename", S2_FOLDER1, S2_FOLDER2),translate=TRUE)
shell(paste("rename", S2_FOLDER1, S2_FOLDER2),translate=TRUE)
S2_FOLDER1
file.rename(S2_FOLDER1,S2_FOLDER2)
S2_FOLDER1 <- paste(mainDir_S2,PROV,"/",KAB,collapse = "",sep = "")
S2_FOLDER2 <- paste(mainDir_S2,PROVDIR,"/",KABDIR,collapse = "",sep = "")
S2_FOLDER1
S2_FOLDER1 <- paste(mainDir_S2,PROV,"/",KAB,collapse = "",sep = "")
S2_FOLDER2 <- paste(mainDir_S2,PROVDIR,"/",KABDIR,collapse = "",sep = "")
if (dir.exists(S2_FOLDER1)==TRUE) {
file.rename(S2_FOLDER1,S2_FOLDER2)
} else {
dir.create(S2_FOLDER2, showWarnings = FALSE)
}
S2_FOLDER1
if (dir.exists(S2_FOLDER1)==TRUE) {
file.rename(S2_FOLDER1,S2_FOLDER2)
} else {
dir.create(S2_FOLDER2, showWarnings = FALSE)
}
PROVDIR
KABDIR
S2_FOLDER2
S2_FOLDER1
dir.exists(S2_FOLDER1)
S2_FOLDER1 <- paste(mainDir_S2,PROVDIR,"/",KAB,collapse = "",sep = "")
S2_FOLDER2 <- paste(mainDir_S2,PROVDIR,"/",KABDIR,collapse = "",sep = "")
if (dir.exists(S2_FOLDER1)==TRUE) {
file.rename(S2_FOLDER1,S2_FOLDER2)
} else {
dir.create(S2_FOLDER2, showWarnings = FALSE)
}
S2_FOLDER1 <- paste(mainDir_S2,PROVDIR,"/",KABDIR,"/",KEC,collapse = "",sep = "")
S2_FOLDER2 <- paste(mainDir_S2,PROVDIR,"/",KABDIR,"/",KECDIR,collapse = "",sep = "")
if (dir.exists(S2_FOLDER1)==TRUE) {
file.rename(S2_FOLDER1,S2_FOLDER2)
} else {
dir.create(S2_FOLDER2, showWarnings = FALSE)
}
source('C:/MasseyOffice1/Research/R-Script2019/TCI_PDF_INDO2 dir.R', echo=TRUE)
source('C:/MasseyOffice1/Research/R-Script/tes boxplot.R', echo=TRUE)
final_data_SVM
source('C:/MasseyOffice1/Research/R-Script/tes boxplot.R', echo=TRUE)
windowsFonts(A = windowsFont("Times New Roman"))
final_data_SVM <- rbind(data3,data4,data5)
final_data_SVM$model <- as.factor(final_data_SVM$model)
res.aov.accuracy.SVM <- aov(accuracy ~ model, data = final_data_SVM)
# Summary of the analysis
summary(res.aov.accuracy.SVM)
res.aov.accuracy <- aov(accuracy ~ model, data = final_data)
TukeyHSD(res.aov.accuracy.SVM)
# Summary of the analysis
summary(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
tuk<-TukeyHSD(res.aov.accuracy)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,9,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
res.aov.kappa <- aov(kappa ~ model, data = final_data)
par(op)
# Summary of the analysis
summary(res.aov.kappa)
TukeyHSD(res.aov.kappa)
plot(TukeyHSD(res.aov.kappa) , las=1 , col="brown")
TukeyHSD(res.aov.kappa)
tuk<-TukeyHSD(res.aov.kappa)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,9,3.8,2))
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
plot(tuk,col=psig,yaxt="n")
par(op)
windowsFonts(A = windowsFont("Times New Roman"))
final_data_SVM <- rbind(data3,data4,data5)
final_data_SVM$model <- as.factor(final_data_SVM$model)
res.aov.accuracy.SVM <- aov(accuracy ~ model, data = final_data_SVM)
# Summary of the analysis
summary(res.aov.accuracy.SVM)
TukeyHSD(res.aov.accuracy.SVM)
res.aov.accuracy <- aov(accuracy ~ model, data = final_data)
# Summary of the analysis
summary(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
tuk<-TukeyHSD(res.aov.accuracy)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,9,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
op=par(mar=c(4.2,9,3.8,2))
plot(tuk,col=psig,yaxt="n")
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
TukeyHSD(res.aov.accuracy)
tuk<-TukeyHSD(res.aov.accuracy)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
par(op)
res.aov.kappa <- aov(kappa ~ model, data = final_data)
# Summary of the analysis
summary(res.aov.kappa)
plot(TukeyHSD(res.aov.kappa) , las=1 , col="brown")
TukeyHSD(res.aov.kappa)
tuk<-TukeyHSD(res.aov.kappa)
TukeyHSD(res.aov.kappa)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
par(op)
TukeyHSD(res.aov.kappa)
tuk<-TukeyHSD(res.aov.kappa)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
par(op)
TukeyHSD(res.aov.kappa)
tuk<-TukeyHSD(res.aov.kappa)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
par(op)
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
final_data_SVM$model <- as.factor(final_data_SVM$model)
res.aov.accuracy.SVM <- aov(accuracy ~ model, data = final_data_SVM)
# Summary of the analysis
summary(res.aov.accuracy.SVM)
TukeyHSD(res.aov.accuracy.SVM)
bwplot(results_SVM)
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
# boxplots of results
bwplot(results)
results
psig
# boxplots of results
windowsFonts(A = windowsFont("Times New Roman"))
bwplot(results)
bwplot
bwplot(results)
# boxplots of results
windowsFonts(A = windowsFont("Times New Roman"))
bwplot(results)
results
results$models
data4 <- as.data.frame(results$values$Resample)
data4$model <- "SVM Polynomial"
data4$accuracy <- results$values$`svmPoly~Accuracy`
data4$kappa <- results$values$`svmPoly~Kappa`
data5 <- as.data.frame(results$values$Resample)
data5$model <- "SVM Radial"
data5$accuracy <- results$values$`svmRadial~Accuracy`
data5$kappa <- results$values$`svmRadial~Kappa`
final_data <- rbind(data1,data2,data3,data4,data5)
final_data$model <- as.factor(final_data$model)
final_data_SVM <- rbind(data3,data4,data5)
final_data_SVM$model <- as.factor(final_data_SVM$model)
res.aov.accuracy.SVM <- aov(accuracy ~ model, data = final_data_SVM)
# Summary of the analysis
summary(res.aov.accuracy.SVM)
TukeyHSD(res.aov.accuracy.SVM)
res.aov.accuracy <- aov(accuracy ~ model, data = final_data)
# Summary of the analysis
summary(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
TukeyHSD(res.aov.accuracy)
tuk<-TukeyHSD(res.aov.accuracy)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
par(op)
res.aov.kappa <- aov(kappa ~ model, data = final_data)
# Summary of the analysis
summary(res.aov.kappa)
plot(TukeyHSD(res.aov.kappa) , las=1 , col="brown")
TukeyHSD(res.aov.kappa)
TukeyHSD(res.aov.kappa)
tuk<-TukeyHSD(res.aov.kappa)
psig=as.numeric(apply(tuk$model[,2:3],1,prod)>=0)+1
op=par(mar=c(4.2,12,3.8,2))
plot(tuk,col=psig,yaxt="n")
for (j in 1:length(psig)){
axis(2,at=j,labels=rownames(tuk$model)[length(psig)-j+1],
las=1,cex.axis=.8,col.axis=psig[length(psig)-j+1])
}
par(op)
results_edit <- results
results_edit <- results
results_edit$models <- c("ANN","RF","SVM Linear","svmPoly","svmRadial")
results_edit <- results
results_edit <- results
results_edit$models <- c("ANN","RF","SVM Linear","svmPoly","svmRadial")
bwplot(results_edit)
results_edit
results_edit$models <- c("ANN","RF","SVM Linear","svmPoly","svmRadial")
bwplot(results_edit)
results_edit$values
bwplot(results)
# boxplots of results
windowsFonts(A = windowsFont("Times New Roman"))
bwplot(results)
bwplot(results_edit)
results_edit$models <- c("ANN","RF","SVM Linear","SVM Polynomial","SVM Radial")
bwplot(results_edit)
results_edit$models <- c("ANN","RF","SVM Linear","SVM Polynomial","SVM Radial")
bwplot(results_edit)
results_edit$values$`nnet~Accuracy`<-
names(results_edit)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
results_edit$values$`nnet~Accuracy`<-
names(results_edit)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
results_edit$values$`nnet~Accuracy`<-
names(results_edit$values)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
bwplot(results_edit)
names(results_edit$values)[names(results_edit$values) == "nnet~Kappa"] <- "ANN~Kappa"
bwplot(results_edit)
results_edit$values$`nnet~Accuracy`<-
names(results_edit$values)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
names(results_edit$values)[names(results_edit$values) == "nnet~Kappa"] <- "ANN~Kappa"
bwplot(results_edit)
names(results_edit$values)[names(results_edit$values) == "rf~Accuracy"] <- "RF~Accuracy"
names(results_edit$values)[names(results_edit$values) == "rf~Kappa"] <- "RF~Kappa"
bwplot(results_edit)
names(results_edit$values)[names(results_edit$values) == "svmLinear~Accuracy"] <- "SVM Linear~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmLinear~Kappa"] <- "SVM Linear~Kappa"
bwplot(results_edit)
results_edit <- results
results_edit$models <- c("ANN","RF","SVM Linear","SVM Polynomial","SVM Radial")
results_edit$values$`nnet~Accuracy`<-
names(results_edit$values)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
names(results_edit$values)[names(results_edit$values) == "nnet~Kappa"] <- "ANN~Kappa"
names(results_edit$values)[names(results_edit$values) == "rf~Accuracy"] <- "RF~Accuracy"
names(results_edit$values)[names(results_edit$values) == "rf~Kappa"] <- "RF~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmLinear~Accuracy"] <- "SVM Linear~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmLinear~Kappa"] <- "SVM Linear~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmPoly~Accuracy"] <- "SVM Polynomial~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmPoly~Kappa"] <- "SVM Polynomial~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmRadial~Accuracy"] <- "SVM Radial~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmRadial~Kappa"] <- "SVM Radial~Kappa"
bwplot(results_edit)
results_edit <- results
results_edit$models <- c("ANN","RF","SVM Linear","SVM Polynomial","SVM Radial")
names(results_edit$values)[names(results_edit$values) == "nnet~Accuracy"] <- "ANN~Accuracy"
names(results_edit$values)[names(results_edit$values) == "nnet~Kappa"] <- "ANN~Kappa"
names(results_edit$values)[names(results_edit$values) == "rf~Accuracy"] <- "RF~Accuracy"
names(results_edit$values)[names(results_edit$values) == "rf~Kappa"] <- "RF~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmLinear~Accuracy"] <- "SVM Linear~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmLinear~Kappa"] <- "SVM Linear~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmPoly~Accuracy"] <- "SVM Polynomial~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmPoly~Kappa"] <- "SVM Polynomial~Kappa"
names(results_edit$values)[names(results_edit$values) == "svmRadial~Accuracy"] <- "SVM Radial~Accuracy"
names(results_edit$values)[names(results_edit$values) == "svmRadial~Kappa"] <- "SVM Radial~Kappa"
bwplot(results_edit)
source('C:/MasseyOffice1/Research/R-Script2019/Run-ML-LS8_S2_S1v1-step4-2019_CHANGE_ALLv4.R', echo=TRUE)
source('C:/MasseyOffice1/Research/R-Script2019/Run-ML-LS8_S2_S1v1-step4-2019_CHANGE_ALLv4.R', echo=TRUE)
